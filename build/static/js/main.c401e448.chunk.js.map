{"version":3,"sources":["App.js","services.js","serviceWorker.js","index.js"],"names":["Filter","props","value","filter","onChange","e","setFilter","target","PersonForm","onSubmit","handleSubmit","newName","setNewName","trim","newNumber","setNewNumber","type","Numbers","src","persons","x","name","toLowerCase","includes","map","key","id","phoneNumber","onClick","delHandler","Notification","message","error","notice","background","fontSize","borderStyle","borderRadius","padding","marginBottom","styleObj","color","style","App","useState","setPersons","setError","notification","setNotification","useEffect","url","console","log","axios","get","then","data","post","setTimeout","catch","response","preventDefault","index","findIndex","window","confirm","delete","_persons","delObj","splice","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c401e448.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {get, post, put, del} from './services';\nconst Filter = (props) => {\n      return (\n        <div>\n          Filter shown with: <input value={props.filter} onChange={(e)=> {props.setFilter(e.target.value);}}/>\n        </div>\n      )\n  };\n  const PersonForm = (props) => {\n      return (\n          <div>\n          <h1>Add New</h1>\n          <form onSubmit={props.handleSubmit}>\n            <div>\n              name: <input value={props.newName} onChange={(e)=>{props.setNewName(e.target.value.trim());}}/>\n          </div>\n          <div>\n              number: <input value={props.newNumber} onChange={(e)=>{props.setNewNumber(e.target.value.trim());}}/>\n\n            </div>\n            <div>\n              <button type=\"submit\">add</button>\n            </div>\n          </form>\n          </div>\n      )\n  };\n  const Numbers = (props) => {\n      let src = [...props.persons];\n      if (props.filter) {\n        src = props.persons.filter(x=>x.name.toLowerCase().includes(props.filter.toLowerCase()))\n      }\n      return (\n          <div>{src.map(x=>(<h3 key={x.id}>{x.name} {x.phoneNumber}<button onClick={()=> {props.delHandler(x.id)}}>Delete</button></h3>))}</div>\n      )\n  };\nconst Notification = ({ message, error }) => {\n  if (message === null) {\n    return null\n  }\n  const notice = {\n      background: 'lightgrey',\n      fontSize: 20,\n      borderStyle: 'solid',\n      borderRadius: 5,\n      padding: 10,\n      marginBottom: 10,\n  }\n  let styleObj = {};\n  if (error) {\n      styleObj = {...notice, color:'red'}\n  } else {\n      styleObj = {...notice, color: 'green'}\n  }\n  return (\n    <div style={styleObj}>\n      {message}\n    </div>\n  )\n}\nconst App = () => {\n  const [ persons, setPersons] = useState([\n  ])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('');\n  const [error, setError ] = useState(null);\n  const [notification, setNotification] = useState(null);\n  const handleSubmit = (e) => {\n      const newObj = {name:newName, phoneNumber:newNumber}\n      post(`/persons`, newObj )\n      .then((x)=> {\n          console.log(x);\n          setPersons([...persons, x.data]);\n          setNewName('');\n          setNewNumber('');\n          setNotification(`${newName} is added to the phonebook`)\n          setTimeout(()=> {setNotification(null)}, 5000)\n\n      })\n      .catch(e=> {setError(`${e.response.data.error}`); setTimeout(()=> {setError(null)}, 5000)})\n      e.preventDefault();\n  }\n    const delHandler = (e) => {\n        const index = persons.findIndex(x=>x.id === e)\n        if (index > -1) {\n            if (window.confirm(`Do you really want to delete ${persons[index].name}`)) {\n\n            del(`/persons/${persons[index].id}`)\n            .then(()=> {\n                let _persons = [...persons];\n                const delObj = _persons.splice(index);\n                setNotification(`${delObj[0].name} is deleted`)\n                setTimeout(()=> {setNotification(null)}, 5000)\n                setPersons([..._persons])\n            })\n            .catch(e=> {setError(`${e.response.data.error}`); setTimeout(()=> {setError(null)}, 5000)})\n        }\n        }\n    }\n  \n  useEffect(()=> {\n      get('/persons')\n      .then(data=>setPersons(data))\n  }, [])\n  return (\n    <div>\n      <Notification message={notification}/>\n      <Notification message={error} error/>\n      <h2>Phonebook</h2>\n      <Filter filter={filter} setFilter={setFilter}/>\n      <PersonForm setNewName={setNewName} setNewNumber={setNewNumber} handleSubmit={handleSubmit}/> \n      <h2>Numbers</h2>\n      <Numbers filter={filter} delHandler={delHandler} persons={persons}/> \n    </div>\n  )\n}\n\nexport default App\n","import axios from 'axios';\nconst baseUrl='/api'\nconst get = (url) => {\n    console.log(url)\n   return axios.get(`${baseUrl}${url}`).then(x=>x.data)\n}\nconst post = (url, data) => {\n    return axios.post(`${baseUrl}${url}`, data)\n}\nconst del = (url, data) => {\n    return axios.delete(`${baseUrl}${url}`)\n}\nconst put = (url, data) => {\n    return axios.post(`${baseUrl}${url}`, data)\n}\n\nexport {get, post, del, put};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}